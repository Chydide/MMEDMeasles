// Generated by rstantools.  Do not edit by hand.

/*
    MMEDMeasles is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MMEDMeasles is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MMEDMeasles.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_measles_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 40> locations_array__ =
  {" (found before start of program)",
  " (in 'measles', line 18, column 2 to column 29)",
  " (in 'measles', line 19, column 2 to column 28)",
  " (in 'measles', line 20, column 2 to column 27)",
  " (in 'measles', line 24, column 8 to column 22)",
  " (in 'measles', line 24, column 24 to column 33)",
  " (in 'measles', line 24, column 2 to column 52)",
  " (in 'measles', line 25, column 8 to column 22)",
  " (in 'measles', line 25, column 24 to column 33)",
  " (in 'measles', line 25, column 2 to column 46)",
  " (in 'measles', line 26, column 8 to column 22)",
  " (in 'measles', line 26, column 24 to column 33)",
  " (in 'measles', line 26, column 2 to column 46)",
  " (in 'measles', line 29, column 4 to column 78)",
  " (in 'measles', line 30, column 4 to column 121)",
  " (in 'measles', line 28, column 25 to line 31, column 3)",
  " (in 'measles', line 28, column 2 to line 31, column 3)",
  " (in 'measles', line 35, column 6 to column 105)",
  " (in 'measles', line 36, column 6 to column 146)",
  " (in 'measles', line 34, column 27 to line 37, column 5)",
  " (in 'measles', line 34, column 4 to line 37, column 5)",
  " (in 'measles', line 33, column 30 to line 38, column 3)",
  " (in 'measles', line 33, column 2 to line 38, column 3)",
  " (in 'measles', line 9, column 2 to column 25)",
  " (in 'measles', line 10, column 2 to column 30)",
  " (in 'measles', line 11, column 8 to column 17)",
  " (in 'measles', line 11, column 19 to column 33)",
  " (in 'measles', line 11, column 2 to column 43)",
  " (in 'measles', line 12, column 8 to column 17)",
  " (in 'measles', line 12, column 19 to column 33)",
  " (in 'measles', line 12, column 2 to column 54)",
  " (in 'measles', line 13, column 8 to column 17)",
  " (in 'measles', line 13, column 19 to column 33)",
  " (in 'measles', line 13, column 2 to column 51)",
  " (in 'measles', line 14, column 8 to column 17)",
  " (in 'measles', line 14, column 19 to column 33)",
  " (in 'measles', line 14, column 2 to column 55)",
  " (in 'measles', line 18, column 9 to column 20)",
  " (in 'measles', line 19, column 9 to column 20)",
  " (in 'measles', line 20, column 9 to column 20)"};
#include <stan_meta_header.hpp>
class model_measles final : public model_base_crtp<model_measles> {
private:
  int n_cohorts;
  int n_observations;
  std::vector<std::vector<int>> age;
  std::vector<std::vector<int>> vaccine_status;
  std::vector<std::vector<int>> sample_size;
  std::vector<std::vector<int>> population_size;
  int lambda_1dim__;
  int alpha_1dim__;
  int beta_1dim__;
public:
  ~model_measles() {}
  model_measles(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_measles_namespace::model_measles";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization", "n_cohorts", "int",
        std::vector<size_t>{});
      n_cohorts = std::numeric_limits<int>::min();
      current_statement__ = 23;
      n_cohorts = context__.vals_i("n_cohorts")[(1 - 1)];
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "n_cohorts", n_cohorts,
        0);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "n_observations", "int",
        std::vector<size_t>{});
      n_observations = std::numeric_limits<int>::min();
      current_statement__ = 24;
      n_observations = context__.vals_i("n_observations")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "n_observations",
        n_observations, 0);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("age", "n_cohorts", n_cohorts);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("age", "n_observations",
        n_observations);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "age", "int",
        std::vector<size_t>{static_cast<size_t>(n_cohorts),
          static_cast<size_t>(n_observations)});
      age = std::vector<std::vector<int>>(n_cohorts,
              std::vector<int>(n_observations,
                std::numeric_limits<int>::min()));
      {
        std::vector<int> age_flat__;
        current_statement__ = 27;
        age_flat__ = context__.vals_i("age");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
          current_statement__ = 27;
          for (int sym2__ = 1; sym2__ <= n_cohorts; ++sym2__) {
            current_statement__ = 27;
            stan::model::assign(age, age_flat__[(pos__ - 1)],
              "assigning variable age", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 27;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("vaccine_status", "n_cohorts",
        n_cohorts);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("vaccine_status",
        "n_observations", n_observations);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "vaccine_status", "int",
        std::vector<size_t>{static_cast<size_t>(n_cohorts),
          static_cast<size_t>(n_observations)});
      vaccine_status = std::vector<std::vector<int>>(n_cohorts,
                         std::vector<int>(n_observations,
                           std::numeric_limits<int>::min()));
      {
        std::vector<int> vaccine_status_flat__;
        current_statement__ = 30;
        vaccine_status_flat__ = context__.vals_i("vaccine_status");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= n_cohorts; ++sym2__) {
            current_statement__ = 30;
            stan::model::assign(vaccine_status, vaccine_status_flat__[(pos__
              - 1)], "assigning variable vaccine_status",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 30;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      stan::math::validate_non_negative_index("sample_size", "n_cohorts",
        n_cohorts);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("sample_size",
        "n_observations", n_observations);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "sample_size", "int",
        std::vector<size_t>{static_cast<size_t>(n_cohorts),
          static_cast<size_t>(n_observations)});
      sample_size = std::vector<std::vector<int>>(n_cohorts,
                      std::vector<int>(n_observations,
                        std::numeric_limits<int>::min()));
      {
        std::vector<int> sample_size_flat__;
        current_statement__ = 33;
        sample_size_flat__ = context__.vals_i("sample_size");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= n_cohorts; ++sym2__) {
            current_statement__ = 33;
            stan::model::assign(sample_size, sample_size_flat__[(pos__ - 1)],
              "assigning variable sample_size",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 33;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      stan::math::validate_non_negative_index("population_size", "n_cohorts",
        n_cohorts);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("population_size",
        "n_observations", n_observations);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "population_size",
        "int",
        std::vector<size_t>{static_cast<size_t>(n_cohorts),
          static_cast<size_t>(n_observations)});
      population_size = std::vector<std::vector<int>>(n_cohorts,
                          std::vector<int>(n_observations,
                            std::numeric_limits<int>::min()));
      {
        std::vector<int> population_size_flat__;
        current_statement__ = 36;
        population_size_flat__ = context__.vals_i("population_size");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= n_cohorts; ++sym2__) {
            current_statement__ = 36;
            stan::model::assign(population_size,
              population_size_flat__[(pos__ - 1)],
              "assigning variable population_size",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 36;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 37;
      lambda_1dim__ = (n_cohorts - 1);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("lambda", "n_cohorts - 1",
        lambda_1dim__);
      current_statement__ = 38;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 38;
      alpha_1dim__ = (n_cohorts - 1);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("alpha", "n_cohorts - 1",
        alpha_1dim__);
      current_statement__ = 39;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 39;
      beta_1dim__ = (n_cohorts - 1);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("beta", "n_cohorts - 1",
        beta_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = lambda_1dim__ + alpha_1dim__ + beta_1dim__;
  }
  inline std::string model_name() const final {
    return "model_measles";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_measles_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      lambda = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1dim__);
      {
        current_statement__ = 4;
        stan::math::validate_non_negative_index("delta_p_plus",
          "n_observations", n_observations);
        current_statement__ = 5;
        stan::math::validate_non_negative_index("delta_p_plus", "n_cohorts",
          n_cohorts);
        std::vector<std::vector<int>> delta_p_plus =
          std::vector<std::vector<int>>(n_observations,
            std::vector<int>(n_cohorts, std::numeric_limits<int>::min()));
        current_statement__ = 7;
        stan::math::validate_non_negative_index("p_plus", "n_observations",
          n_observations);
        current_statement__ = 8;
        stan::math::validate_non_negative_index("p_plus", "n_cohorts",
          n_cohorts);
        std::vector<std::vector<int>> p_plus =
          std::vector<std::vector<int>>(n_observations,
            std::vector<int>(n_cohorts, std::numeric_limits<int>::min()));
        current_statement__ = 10;
        stan::math::validate_non_negative_index("v_plus", "n_observations",
          n_observations);
        current_statement__ = 11;
        stan::math::validate_non_negative_index("v_plus", "n_cohorts",
          n_cohorts);
        std::vector<std::vector<int>> v_plus =
          std::vector<std::vector<int>>(n_observations,
            std::vector<int>(n_cohorts, std::numeric_limits<int>::min()));
        current_statement__ = 16;
        for (int c = 1; c <= n_cohorts; ++c) {
          current_statement__ = 13;
          lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                           stan::model::rvalue(
                             stan::model::rvalue(delta_p_plus,
                               "delta_p_plus", stan::model::index_uni(1)),
                             "delta_p_plus[1]", stan::model::index_uni(c)),
                           stan::model::rvalue(
                             stan::model::rvalue(population_size,
                               "population_size", stan::model::index_uni(1)),
                             "population_size[1]", stan::model::index_uni(c)),
                           (1 -
                           stan::math::exp(
                             -stan::model::rvalue(lambda, "lambda",
                                stan::model::index_uni(c))))));
          current_statement__ = 14;
          lp_accum__.add(stan::math::hypergeometric_lpmf<propto__>(
                           stan::model::rvalue(
                             stan::model::rvalue(v_plus, "v_plus",
                               stan::model::index_uni(1)), "v_plus[1]",
                             stan::model::index_uni(c)),
                           stan::model::rvalue(
                             stan::model::rvalue(sample_size, "sample_size",
                               stan::model::index_uni(1)), "sample_size[1]",
                             stan::model::index_uni(c)),
                           stan::model::rvalue(
                             stan::model::rvalue(vaccine_status,
                               "vaccine_status", stan::model::index_uni(1)),
                             "vaccine_status[1]", stan::model::index_uni(c)),
                           (stan::model::rvalue(
                              stan::model::rvalue(population_size,
                                "population_size", stan::model::index_uni(1)),
                              "population_size[1]", stan::model::index_uni(c))
                           -
                           stan::model::rvalue(
                             stan::model::rvalue(vaccine_status,
                               "vaccine_status", stan::model::index_uni(1)),
                             "vaccine_status[1]", stan::model::index_uni(c)))));
        }
        current_statement__ = 22;
        for (int t = 2; t <= n_observations; ++t) {
          current_statement__ = 20;
          for (int c = 1; c <= n_cohorts; ++c) {
            current_statement__ = 17;
            lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                             stan::model::rvalue(
                               stan::model::rvalue(delta_p_plus,
                                 "delta_p_plus", stan::model::index_uni(t)),
                               "delta_p_plus[t]", stan::model::index_uni(c)),
                             (stan::model::rvalue(
                                stan::model::rvalue(population_size,
                                  "population_size",
                                  stan::model::index_uni((t - 1))),
                                "population_size[(t - 1)]",
                                stan::model::index_uni(c)) -
                             stan::model::rvalue(
                               stan::model::rvalue(delta_p_plus,
                                 "delta_p_plus",
                                 stan::model::index_uni((t - 1))),
                               "delta_p_plus[(t - 1)]",
                               stan::model::index_uni(c))), (1 -
                             stan::math::exp(
                               -stan::model::rvalue(lambda, "lambda",
                                  stan::model::index_uni(c))))));
            current_statement__ = 18;
            lp_accum__.add(stan::math::hypergeometric_lpmf<propto__>(
                             stan::model::rvalue(
                               stan::model::rvalue(v_plus, "v_plus",
                                 stan::model::index_uni(t)), "v_plus[t]",
                               stan::model::index_uni(c)),
                             stan::model::rvalue(
                               stan::model::rvalue(sample_size,
                                 "sample_size", stan::model::index_uni(t)),
                               "sample_size[t]", stan::model::index_uni(c)),
                             (stan::model::rvalue(
                                stan::model::rvalue(vaccine_status,
                                  "vaccine_status",
                                  stan::model::index_uni((t - 1))),
                                "vaccine_status[(t - 1)]",
                                stan::model::index_uni(c)) +
                             stan::model::rvalue(
                               stan::model::rvalue(delta_p_plus,
                                 "delta_p_plus", stan::model::index_uni(t)),
                               "delta_p_plus[t]", stan::model::index_uni(c))),
                             (stan::model::rvalue(
                                stan::model::rvalue(population_size,
                                  "population_size",
                                  stan::model::index_uni(t)),
                                "population_size[t]",
                                stan::model::index_uni(c)) -
                             stan::model::rvalue(
                               stan::model::rvalue(vaccine_status,
                                 "vaccine_status", stan::model::index_uni(t)),
                               "vaccine_status[t]", stan::model::index_uni(c)))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_measles_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(lambda_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      lambda = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1dim__);
      out__.write(lambda);
      out__.write(alpha);
      out__.write(beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write(lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__),
        "assigning variable alpha");
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(beta_1dim__),
        "assigning variable beta");
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(alpha_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(beta_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 1;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"lambda", "alpha", "beta"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
                std::vector<size_t>{static_cast<size_t>(beta_1dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((lambda_1dim__ + alpha_1dim__) +
      beta_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((lambda_1dim__ + alpha_1dim__) +
      beta_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_measles_namespace::model_measles;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_measles_namespace::profiles__;
}
#endif
#endif
