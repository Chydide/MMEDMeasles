// Generated by rstantools.  Do not edit by hand.

/*
    MMEDMeasles is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MMEDMeasles is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MMEDMeasles.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_measles_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 19> locations_array__ =
  {" (found before start of program)",
  " (in 'measles', line 15, column 2 to column 46)",
  " (in 'measles', line 27, column 2 to column 43)",
  " (in 'measles', line 28, column 2 to column 41)",
  " (in 'measles', line 31, column 4 to column 89)",
  " (in 'measles', line 32, column 4 to column 54)",
  " (in 'measles', line 30, column 30 to line 33, column 3)",
  " (in 'measles', line 30, column 2 to line 33, column 3)",
  " (in 'measles', line 19, column 2 to column 41)",
  " (in 'measles', line 22, column 4 to column 81)",
  " (in 'measles', line 23, column 4 to column 54)",
  " (in 'measles', line 21, column 30 to line 24, column 3)",
  " (in 'measles', line 21, column 2 to line 24, column 3)",
  " (in 'measles', line 9, column 2 to column 30)",
  " (in 'measles', line 10, column 2 to column 32)",
  " (in 'measles', line 11, column 8 to column 22)",
  " (in 'measles', line 11, column 2 to column 39)",
  " (in 'measles', line 15, column 9 to column 23)",
  " (in 'measles', line 27, column 8 to column 22)"};
#include <stan_meta_header.hpp>
class model_measles final : public model_base_crtp<model_measles> {
private:
  int n_observations;
  int total_population;
  std::vector<int> vaccinated;
public:
  ~model_measles() {}
  model_measles(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_measles_namespace::model_measles";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization", "n_observations", "int",
        std::vector<size_t>{});
      n_observations = std::numeric_limits<int>::min();
      current_statement__ = 13;
      n_observations = context__.vals_i("n_observations")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "n_observations",
        n_observations, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "total_population",
        "int", std::vector<size_t>{});
      total_population = std::numeric_limits<int>::min();
      current_statement__ = 14;
      total_population = context__.vals_i("total_population")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "total_population",
        total_population, 0);
      current_statement__ = 15;
      stan::math::validate_non_negative_index("vaccinated", "n_observations",
        n_observations);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "vaccinated", "int",
        std::vector<size_t>{static_cast<size_t>(n_observations)});
      vaccinated = std::vector<int>(n_observations,
                     std::numeric_limits<int>::min());
      current_statement__ = 16;
      vaccinated = context__.vals_i("vaccinated");
      current_statement__ = 17;
      stan::math::validate_non_negative_index("force_of_vaccination",
        "n_observations", n_observations);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("vaccinated_sim",
        "n_observations", n_observations);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_observations;
  }
  inline std::string model_name() const final {
    return "model_measles";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_measles_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> force_of_vaccination =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_observations,
          DUMMY_VAR__);
      current_statement__ = 1;
      force_of_vaccination = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(n_observations);
      {
        int population_left = std::numeric_limits<int>::min();
        current_statement__ = 8;
        population_left = total_population;
        current_statement__ = 12;
        for (int i = 1; i <= n_observations; ++i) {
          current_statement__ = 9;
          lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                           stan::model::rvalue(vaccinated, "vaccinated",
                             stan::model::index_uni(i)), population_left, (1
                           -
                           stan::math::exp(
                             -stan::model::rvalue(force_of_vaccination,
                                "force_of_vaccination",
                                stan::model::index_uni(i))))));
          current_statement__ = 10;
          population_left = (population_left -
            stan::model::rvalue(vaccinated, "vaccinated",
              stan::model::index_uni(i)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_measles_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> force_of_vaccination =
        Eigen::Matrix<double,-1,1>::Constant(n_observations,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      force_of_vaccination = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(n_observations);
      out__.write(force_of_vaccination);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<int> vaccinated_sim =
        std::vector<int>(n_observations, std::numeric_limits<int>::min());
      int population_left = std::numeric_limits<int>::min();
      current_statement__ = 3;
      population_left = total_population;
      current_statement__ = 7;
      for (int i = 1; i <= n_observations; ++i) {
        current_statement__ = 4;
        stan::model::assign(vaccinated_sim,
          stan::math::binomial_rng(population_left, (1 -
            stan::math::exp(
              -stan::model::rvalue(force_of_vaccination,
                 "force_of_vaccination", stan::model::index_uni(i)))),
            base_rng__), "assigning variable vaccinated_sim",
          stan::model::index_uni(i));
        current_statement__ = 5;
        population_left = (population_left -
          stan::model::rvalue(vaccinated, "vaccinated",
            stan::model::index_uni(i)));
      }
      out__.write(vaccinated_sim);
      out__.write(population_left);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> force_of_vaccination =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_observations,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(force_of_vaccination,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_observations),
        "assigning variable force_of_vaccination");
      out__.write(force_of_vaccination);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization",
        "force_of_vaccination", "double",
        std::vector<size_t>{static_cast<size_t>(n_observations)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> force_of_vaccination =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_observations,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> force_of_vaccination_flat__;
        current_statement__ = 1;
        force_of_vaccination_flat__ = context__.vals_r("force_of_vaccination");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(force_of_vaccination,
            force_of_vaccination_flat__[(pos__ - 1)],
            "assigning variable force_of_vaccination",
            stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(force_of_vaccination);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"force_of_vaccination"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"vaccinated_sim", "population_left"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_observations)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_observations)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
      param_names__.emplace_back(std::string() + "force_of_vaccination" + '.'
        + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
        param_names__.emplace_back(std::string() + "vaccinated_sim" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "population_left");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
      param_names__.emplace_back(std::string() + "force_of_vaccination" + '.'
        + std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_observations; ++sym1__) {
        param_names__.emplace_back(std::string() + "vaccinated_sim" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "population_left");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"force_of_vaccination\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_observations) + "},\"block\":\"parameters\"},{\"name\":\"vaccinated_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_observations) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"population_left\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"force_of_vaccination\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_observations) + "},\"block\":\"parameters\"},{\"name\":\"vaccinated_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_observations) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"population_left\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = n_observations;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((n_observations + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = n_observations;
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((n_observations + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_measles_namespace::model_measles;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_measles_namespace::profiles__;
}
#endif
#endif
